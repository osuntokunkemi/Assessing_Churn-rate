# Import libraries and methods/functions
import pandas as pd
from sklearn.preprocessing import StandardScaler, OneHotEncoder 
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix
telco_demog = pd.read_csv('telecom_demographics.csv')
telco_usage = pd.read_csv('telecom_usage.csv')

churn_df = telco_demog.merge(telco_usage, on = 'customer_id')

churn_rate = churn_df['churn'].value_counts() / len(churn_df)
print(churn_rate)
print(churn_df.info())

churn_df = pd.get_dummies(churn_df, columns= ['telecom_partner', 'gender', 'state', 'city', 'registration_event'])
scaler = StandardScaler()
                          
features = churn_df.drop(['customer_id', 'churn'], axis=1)
                          
features_scaled = scaler.fit_transform(features)
target = churn_df['churn']
X_train, X_test, y_train, y_test = train_test_split(features_scaled, target, test_size=0.2, random_state=42)    
logreg = LogisticRegression(random_state=42)
logreg.fit(X_train, y_train)
logreg_pred = logreg.predict(X_test)

print(confusion_matrix(y_test, logreg_pred))
print(classification_report(y_test, logreg_pred))

rf = RandomForestClassifier(random_state=42)
rf.fit(X_train, y_train)
       
rf_pred = rf.predict(X_test)  
print(confusion_matrix(y_test, rf_pred))    
print(classification_report(y_test, rf_pred))
higher_accuracy = "RandomForest"       
                          
                          
